plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.11" apply false
    id "org.jetbrains.dokka" version "0.9.17" apply false
}

subprojects {
    ext {
        websocket_dep = 'javax.websocket:javax.websocket-api:1.0'
        jetty_dep = 'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.4.14.v20181114'
        undertow_dep = 'io.undertow:undertow-websockets-jsr:2.0.16.Final'
    }

    apply plugin: "org.jetbrains.kotlin.jvm"

    sourceSets {
        main { kotlin { srcDir 'main' } }
        test { kotlin { srcDir 'test' } }
        test { java { srcDir 'test' } }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit5"
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint"
        options.compilerArgs << "-parameters"
        options.encoding = "US-ASCII"
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            javaParameters = true
            allWarningsAsErrors = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            javaParameters = true
            allWarningsAsErrors = true
        }
    }

    repositories {
        mavenCentral()
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }

    jar {
        manifest {
            attributes('Automatic-Module-Name': 'ch.softappeal.' + project.name.replace('-', '.'))
        }
    }

    apply plugin: "org.jetbrains.dokka"

    dokka {
        outputFormat = 'html'
        reportUndocumented = false
        outputDirectory = "$buildDir/dokka"
    }

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group = "ch.softappeal.yass"

    if (project.name != "tutorial") {
        task sourcesJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }

        task dokkaJar(type: Jar, dependsOn: 'dokka') {
            from "$buildDir/dokka"
            classifier = 'javadoc'
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact dokkaJar
                    pom {
                        name = project.name
                        description = 'Yet Another Service Solution'
                        url = 'https://github.com/softappeal/yass'
                        licenses { license { name = 'BSD-3-Clause' } }
                        scm { url = 'https://github.com/softappeal/yass' }
                        organization { name = 'softappeal GmbH Switzerland' }
                        developers { developer { name = 'Angelo Salvade' } }
                    }
                }
            }
            repositories {
                maven {
                    // url = "$buildDir/repos"
                    url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                    credentials {
                        username = project.findProperty('ossrhUsername') ?: "dummy"
                        password = project.findProperty('ossrhPassword') ?: "dummy"
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }
    }
}

task clean {
    doLast {
        ant.delete(dir: ".", includes: "*/out/", includeemptydirs: true)
    }
}

project(":kotlin:yass") {
    dependencies {
        testCompile('org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.0.1') {
            // $todo: needed because dependencies are broken
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-common'
        }
    }
}

project(":kotlin:yass-generate") {
    dependencies {
        compile project(":kotlin:yass")
    }
}

project(":kotlin:yass-transport-ws") {
    dependencies {
        compile project(":kotlin:yass")
        compileOnly websocket_dep
        testCompile project(":kotlin:yass").sourceSets.test.runtimeClasspath
        testCompile jetty_dep
        testCompile undertow_dep
    }
}

project(":kotlin:tutorial") {
    dependencies {
        compile project(":kotlin:yass-transport-ws")
        compile project(":kotlin:yass-generate")
        // compile "ch.softappeal.yass:yass-transport-ws:x.y.z"
        // compile "ch.softappeal.yass:yass-generate:x.y.z"
        compile jetty_dep
        compile undertow_dep
    }
    sourceSets {
        main { java { srcDir 'main' } }
    }
}
